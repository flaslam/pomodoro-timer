import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useEffect, useRef, useState } from "react";
import { formatSecondsToMinutes } from "../lib/utils";
import { OptionsButton, TimerButton } from "../components/buttons";

enum Period {
  Break,
  Work,
}

interface Timer {
  type: Period;
  length: number;
}

const timers = {
  work: { type: Period.Work, length: 25 * 60 },
  shortBreak: { type: Period.Break, length: 5 * 60 },
  longBreak: { type: Period.Break, length: 15 * 60 },
};

const STATS_DATA: string = "pomodoroStats";

interface Stats {
  focusPeriodsTotal: number;
}

// set colour scheme
// each timer has it's own colour scheme
// each colour scheme has:

// TODO: these should instead be objects
interface colourScheme {
  bg: string;
  light: string;
  dark: string;
  darkest: string;
}

const colourSchemes = {
  red: { bg: "", light: "", dark: "", darkest: "" },
  blueLight: { bg: "", light: "", dark: "", darkest: "" },
  blueDark: { bg: "", light: "", dark: "", darkest: "" },
};

let currentColourScheme: colourScheme = colourSchemes.red;

const Home: NextPage = () => {
  const [timer, setTimer] = useState<number>(timers.work.length);
  const [currentTimerType, setCurrentTimerType] = useState<Timer>(timers.work);
  const [intervalId, setIntervalId] = useState<any>(null);
  const [timerRunning, setTimerRunning] = useState<boolean>(false);
  const [sessionCount, setSessionCount] = useState<number>(1);
  const [progress, setProgress] = useState<number>(0);
  const [stats, setStats] = useState<Stats>({ focusPeriodsTotal: 0 });

  const isMounted = useRef(false);

  // Handling buttons
  const handleStart = () => {
    startTimer();
  };

  const handleStop = () => {
    stopTimer();
  };

  const handleTimerOptionButton = (newTimerType: Timer) => {
    // TODO: first display a warning if timer is running
    updateTimerType(newTimerType);
  };

  // Timer functions
  const startTimer = () => {
    if (timer <= 0) return;

    const interval = setInterval(() => {
      setTimer((prevCount) => prevCount - 1);
    }, 1000);

    setIntervalId(interval);
    setTimerRunning(true);
  };

  const stopTimer = () => {
    if (intervalId) {
      clearInterval(intervalId);
      setIntervalId(null);
    }
    setTimerRunning(false);
  };

  const updateTimerType = (newTimerType: Timer) => {
    stopTimer();
    setTimer(newTimerType.length);
    setCurrentTimerType(newTimerType);
    setProgress(0);
  };

  const completeInterval = () => {
    // Keep a count of sessions
    if (currentTimerType.type === Period.Work) {
      setSessionCount((prevCount) => prevCount + 1);

      updateStats();

      if (sessionCount % 4 === 0) {
        updateTimerType(timers.longBreak);
        return;
      }

      updateTimerType(timers.shortBreak);
      return;
    }

    // We are on a break
    updateTimerType(timers.work);
  };

  const loadStats = () => {
    // Load our user stats
    const user = localStorage.getItem(STATS_DATA);
    if (user) {
      const data = JSON.parse(user);
      setStats(data);
      return;
    }

    // Create a user as we have none
    localStorage.setItem(STATS_DATA, JSON.stringify(stats));
  };

  // On component mount
  useEffect(() => {
    loadStats();

    // Initiate timer with current timer type length
    setTimer(currentTimerType.length);
  }, []);

  // On component update timer
  useEffect(() => {
    if (timerRunning) {
      // Update progress bar
      setProgress(
        ((currentTimerType.length - timer) / currentTimerType.length) * 100
      );
    }

    if (timer <= 0 && timerRunning) {
      stopTimer();

      // Mark timer complete.
      completeInterval();
    }
  }, [timer]);

  const updateStats = () => {
    setStats((prevState) => {
      const newStats: Stats = {
        focusPeriodsTotal: prevState.focusPeriodsTotal + 1,
      };
      return newStats;
    });
  };

  // On update stats, save to local storage
  useEffect(() => {
    // Make sure this doesn't run on first mount
    if (!isMounted.current) {
      isMounted.current = true;
      return;
    }

    localStorage.setItem(STATS_DATA, JSON.stringify(stats));
  }, [stats]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Pomodoro Timer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.timerContainer}>
          <div className={styles.timerOptions}>
            <ul>
              <li>
                <OptionsButton
                  onClick={() => handleTimerOptionButton(timers.work)}
                >
                  Pomodoro
                </OptionsButton>
              </li>
              <li>
                <OptionsButton
                  onClick={() => handleTimerOptionButton(timers.shortBreak)}
                >
                  Short Break
                </OptionsButton>
              </li>
              <li>
                <OptionsButton
                  onClick={() => handleTimerOptionButton(timers.longBreak)}
                >
                  Long Break
                </OptionsButton>
              </li>
            </ul>
          </div>
          <div className={styles.timerDisplay}>
            {formatSecondsToMinutes(timer)}
          </div>
          {!timerRunning ? (
            <TimerButton className={styles.timerButton} onClick={handleStart}>
              Start
            </TimerButton>
          ) : (
            <TimerButton className={styles.timerButton} onClick={handleStop}>
              Stop
            </TimerButton>
          )}
        </div>

        <div className={styles.timerDetails}>
          <div>#{sessionCount}</div>
          <div>
            {currentTimerType.type === Period.Work ? (
              <>Time to focus!</>
            ) : (
              <>Time for a break!</>
            )}
          </div>
        </div>
        {!isMounted.current ? null : (
          <div>user stats: {stats.focusPeriodsTotal}</div>
        )}

        {/* <div>
          <div>
            <div>Tasks</div>
            <div>Options button</div>
          </div>
          <div>List of all tasks</div>
          <div>Add task</div>
          <div>Est: Act: Finish at:</div>
        </div> */}
      </main>
    </div>
  );
};

export default Home;
